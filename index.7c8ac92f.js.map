{"mappings":"ACAA,MAAM,EAAe,IAAI,gBAAgB,SAAS,MAAM,EAClD,EAAS,EAAa,GAAG,CAAC,WAC1B,EAAQ,EAAa,GAAG,CAAC,QAE/B,CAAA,UAAU,aAAa,EAAE,SAAS,UAC/B,KAAK,AAAA,IACJ,QAAQ,GAAG,CAAC,aAAc,GAC1B,EAAc,EAChB,GACC,MAAM,AAAC,GAAM,QAAQ,KAAK,CAAC,EAAG,wBAEjC,MAAM,EAAgB,AAAC,IACrB,GAAI,CAAC,EAAO,OACZ,IAAM,EAAuB,EAAsB,GAEnD,EAAG,WAAW,CAAC,SAAS,CAAC,CACrB,gBAAiB,CAAA,EACjB,qBAAsB,CAC1B,GAAG,IAAI,CAAC,AAAC,IACL,QAAQ,GAAG,CAAC,sBAAuB,EACvC,GAAG,KAAK,CAAC,AAAC,IACN,QAAQ,GAAG,CAAC,iCAAkC,EAClD,EACF,EAEM,EAAwB,AAAC,IAC7B,IAAM,EAAU,IAAI,MAAM,CAAC,AAAC,CAAA,EAAI,EAAa,MAAM,CAAG,CAAA,EAAK,GACrD,EAAU,AAAA,CAAA,EAAe,CAAA,EAAS,OAAO,CAAC,MAAO,KAAK,OAAO,CAAC,KAAM,KACpE,EAAU,OAAO,IAAI,CAAC,GACtB,EAAc,IAAI,WAAW,EAAQ,MAAM,EACjD,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,MAAM,CAAE,EAAE,EAClC,CAAW,CAAC,EAAE,CAAG,EAAQ,UAAU,CAAC,GAExC,OAAO,CACT,EAEM,EAAU,IAAI,IAAI,CAAC,EAAE,EAAO,MAAM,EAAE,SAAS,MAAM,CAAC,QAAQ,GAAG,CAAC,EACtE,SAAS,cAAc,CAAC,aAAa,iBAAiB,QAAS,AAAC,IAC9D,EAAE,cAAc,GAEhB,MAAM,EAAS,CACb,OAAQ,OACR,KAAM,OACN,QAAS,CACP,8BAA+B,GACjC,CACF,GACG,IAAI,CAAC,QAAQ,GAAG,EAChB,KAAK,CAAC,QAAQ,KAAK,CACxB","sources":["<anon>","src/main.ts"],"sourcesContent":["const searchParams = new URLSearchParams(location.search);\nconst apiUrl = searchParams.get(\"api-url\");\nconst vapid = searchParams.get(\"vapid\");\nnavigator.serviceWorker?.register(\"/sw.ts\").then((reg)=>{\n    console.log(\"registered\", reg);\n    subscribeUser(reg);\n}).catch((e)=>console.error(e, \"registration failed\"));\nconst subscribeUser = (sw)=>{\n    if (!vapid) return;\n    const applicationServerKey = urlBase64ToUint8Array(vapid);\n    sw.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: applicationServerKey\n    }).then((subscription)=>{\n        console.log(\"User is subscribed:\", subscription);\n    }).catch((err)=>{\n        console.log(\"Failed to subscribe the user: \", err);\n    });\n};\nconst urlBase64ToUint8Array = (base64String)=>{\n    const padding = \"=\".repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\");\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    for(let i = 0; i < rawData.length; ++i)outputArray[i] = rawData.charCodeAt(i);\n    return outputArray;\n};\nconst pingUrl = new URL(`${apiUrl}/ping/${location.search.toString()}`);\ndocument.getElementById(\"ping-btn\")?.addEventListener(\"click\", (e)=>{\n    e.preventDefault();\n    fetch(pingUrl, {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\"\n        }\n    }).then(console.log).catch(console.error);\n});\n\n//# sourceMappingURL=index.7c8ac92f.js.map\n","const searchParams = new URLSearchParams(location.search);\r\nconst apiUrl = searchParams.get('api-url');\r\nconst vapid = searchParams.get('vapid');\r\n\r\nnavigator.serviceWorker?.register('/sw.ts')\r\n  .then(reg  => {\r\n    console.log('registered', reg)\r\n    subscribeUser(reg);\r\n  })\r\n  .catch((e) => console.error(e, 'registration failed'))\r\n\r\nconst subscribeUser = (sw: ServiceWorkerRegistration) => {\r\n  if (!vapid) return;\r\n  const applicationServerKey = urlBase64ToUint8Array(vapid);\r\n\r\n  sw.pushManager.subscribe({\r\n      userVisibleOnly: true,\r\n      applicationServerKey: applicationServerKey\r\n  }).then((subscription) => {\r\n      console.log('User is subscribed:', subscription);\r\n  }).catch((err) => {\r\n      console.log('Failed to subscribe the user: ', err);\r\n  });\r\n}\r\n\r\nconst urlBase64ToUint8Array = (base64String: string) => {\r\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n  const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\r\n  const rawData = window.atob(base64);\r\n  const outputArray = new Uint8Array(rawData.length);\r\n  for (let i = 0; i < rawData.length; ++i) {\r\n      outputArray[i] = rawData.charCodeAt(i);\r\n  }\r\n  return outputArray;\r\n}\r\n\r\nconst pingUrl = new URL(`${apiUrl}/ping/${location.search.toString()}`);\r\ndocument.getElementById('ping-btn')?.addEventListener('click', (e) => {\r\n  e.preventDefault()\r\n\r\n  fetch(pingUrl, {\r\n    method: 'POST',\r\n    mode: 'cors',\r\n    headers: {\r\n      'Access-Control-Allow-Origin': '*'\r\n    }\r\n  })\r\n    .then(console.log)\r\n    .catch(console.error);\r\n})\r\n\r\n"],"names":["searchParams","URLSearchParams","location","search","apiUrl","get","vapid","navigator","serviceWorker","register","then","reg","console","log","subscribeUser","catch","e","error","sw","applicationServerKey","urlBase64ToUint8Array","pushManager","subscribe","userVisibleOnly","subscription","err","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","pingUrl","URL","toString","document","getElementById","addEventListener","preventDefault","fetch","method","mode","headers"],"version":3,"file":"index.7c8ac92f.js.map"}